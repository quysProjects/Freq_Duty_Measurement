
AVRASM ver. 2.2.8  C:\Users\ASUS\Downloads\2114597_LeDucQuy_L04\dotansovadutycylce\dotansovadutycylce\main.asm Sun Dec 24 10:48:19 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m324PAdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m324PAdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega324PA.xml *********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m324PAdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega324PA
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega324PA
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M324PADEF_INC_
                                 #define _M324PADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega324PA
                                 #pragma AVRPART ADMIN PART_NAME ATmega324PA
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x11
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR0	= 0x2e
                                 .equ	SPSR0	= 0x2d
                                 .equ	SPCR0	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 .equ	PCIE3	= 3	; Pin Change Interrupt Enable 3
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 .equ	PCIF3	= 3	; Pin Change Interrupt Flag 3
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0	; Pin Change Enable Mask 24
                                 .equ	PCINT25	= 1	; Pin Change Enable Mask 25
                                 .equ	PCINT26	= 2	; Pin Change Enable Mask 26
                                 .equ	PCINT27	= 3	; Pin Change Enable Mask 27
                                 .equ	PCINT28	= 4	; Pin Change Enable Mask 28
                                 .equ	PCINT29	= 5	; Pin Change Enable Mask 29
                                 .equ	PCINT30	= 6	; Pin Change Enable Mask 30
                                 .equ	PCINT31	= 7	; Pin Change Enable Mask 31
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR0 - SPI Data Register
                                 .equ	SPDRB0	= 0	; SPI Data Register bit 0
                                 .equ	SPDRB1	= 1	; SPI Data Register bit 1
                                 .equ	SPDRB2	= 2	; SPI Data Register bit 2
                                 .equ	SPDRB3	= 3	; SPI Data Register bit 3
                                 .equ	SPDRB4	= 4	; SPI Data Register bit 4
                                 .equ	SPDRB5	= 5	; SPI Data Register bit 5
                                 .equ	SPDRB6	= 6	; SPI Data Register bit 6
                                 .equ	SPDRB7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR0 - SPI Status Register
                                 .equ	SPI2X0	= 0	; Double SPI Speed Bit
                                 .equ	WCOL0	= 6	; Write Collision Flag
                                 .equ	SPIF0	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR0 - SPI Control Register
                                 .equ	SPR00	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR10	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA0	= 2	; Clock Phase
                                 .equ	CPOL0	= 3	; Clock polarity
                                 .equ	MSTR0	= 4	; Master/Slave Select
                                 .equ	DORD0	= 5	; Data Order
                                 .equ	SPE0	= 6	; SPI Enable
                                 .equ	SPIE0	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 .equ	BODSE	= 5	; BOD Power Down in Sleep Enable
                                 .equ	BODS	= 6	; BOD Power Down in Sleep
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART 0
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4	; Power Reduction USART 1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	PCI0addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x000c	; Pin Change Interrupt Request 2
                                 .equ	PCI3addr	= 0x000e	; Pin Change Interrupt Request 3
                                 .equ	WDTaddr	= 0x0010	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x0012	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0014	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x0016	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0018	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x001a	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001c	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001e	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x0020	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x0022	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x0024	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0026	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0028	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x002a	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x002c	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	ADCCaddr	= 0x0030	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0032	; EEPROM Ready
                                 .equ	TWIaddr	= 0x0034	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0036	; Store Program Memory Read
                                 .equ	URXC1addr	= 0x0038	; USART1 RX complete
                                 .equ	UDRE1addr	= 0x003a	; USART1 Data Register Empty
                                 .equ	UTXC1addr	= 0x003c	; USART1 TX complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 62	; size in words
                                 
                                 #endif  /* _M324PADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; dotansovadutycylce.asm
                                 ;
                                 ; Created: 12/9/2023 8:29:43 AM
                                 ; Author : Le Duc Quy
                                 ;
                                 
                                 ; Replace with your application code
                                 // Cac dinh nghia
                                 .DEF OPD1_L=R20 ;byte thap cua so nhi phan 16 bit
                                 .DEF OPD1_H=R21 ;byte cao cua so nhi phan 16 bit
                                 .DEF OPD2=R22
                                 .DEF OPD3=R23
                                 .DEF DIVD_QU_L=R24
                                 .DEF DIVD_QU_H=R25
                                 .DEF DIVSR_L=R4
                                 .DEF DIVSR_H=R5
                                 .DEF REMDR_L=R2
                                 .DEF REMDR_H=R3
                                 .DEF COUNT=R18
                                 .EQU OUTPORT=PORTB					;PORTB la port xuat ra LCD
                                 .EQU INPORT=PINB
                                 .EQU IOSETB=DDRB
                                 .EQU CONT=PORTC						;PORTC dieu khien LCD
                                 .EQU CONT_DR=DDRC
                                 .EQU CONT_IN=PINC
                                 .EQU RS=0							;bit RS
                                 .EQU RW=1							;bit RW
                                 .EQU E=2							;bit E
                                 .EQU NULL=$00 ;ma ket thuc
                                 .EQU BCD_BUF=0X200 ;d/c luu SRAM luu so BCD (kq chuyen tu so 16 bit)
                                 			.ORG 0
000000 c03f                      			RJMP MAIN
                                 			.ORG 0X40
                                 // Cau hinh cac chan
000040 e008                      MAIN:		LDI R16,HIGH(RAMEND) ;dua stack len vung d/c cao
000041 bf0e                      			OUT SPH,R16
000042 ef0f                      			LDI R16,LOW(RAMEND)
000043 bf0d                      			OUT SPL,R16
000044 e007                      			LDI R16,0X07
000045 b907                      			OUT CONT_DR,R16 ;khai bao PC0,PC1,PC2 la output
000046 9840                      			CBI CONT,RS ;RS=PC0=0
000047 9841                      			CBI CONT,RW ;RW=PC1=0 truy xuat ghi
000048 9842                      			CBI CONT,E ;E=PC2=0 cam LCD
000049 ef0f                      			LDI R16,0XFF
00004a b904                      			OUT IOSETB,R16 ;khai bao outport
00004b 9856                      			CBI DDRD,6; khai bao PD6 la input
                                 			;--------------------------------
00004c d0b7                      			RCALL POWER_RESET_LCD8 ;reset cap nguon LCD 8 bit
00004d d0c8                      			RCALL INIT_LCD8 ;ctc khoi dong LCD 8 bit
                                 			;--------------------------------
00004e e0f4                      			LDI ZH,HIGH(MSG1<<1) ;Z tro dau bang tra MSG1
00004f e0e0                      			LDI ZL,LOW(MSG1<<1)
000050 d0e3                      			RCALL MSG_DISP ;ghi MSG1 ra LCD
000051 ec10                      			LDI R17,$C0 ;con tro bat dau o dau dong 2
000052 d0d8                      			RCALL CURS_POS ;xuat lenh ra LCD
000053 e0f4                      			LDI ZH,HIGH(MSG2<<1) ;Z tro dau bang tra MSG2
000054 e0ea                      			LDI ZL,LOW(MSG2<<1)
000055 d0de                      			RCALL MSG_DISP ;ghi MSG2 ra LCD
                                 ;---------------------------------------------------
                                 ; do tan so
                                 ;---------------------------------------------------
                                 ; Setup Timer1
000056 e010                      START:		LDI R17,0X00 ;Timer1 mode NOR
000057 9310 0080                 			STS TCCR1A,R17
000059 e010                      			LDI R17,0X00 ;Timer1 mode NOR, ban dau cho Timer dung
00005a 9310 0081                 			STS TCCR1B,R17
00005c e805                      			ldi r16, high(-31250) ; 
00005d 9300 0085                 			sts TCNT1H, r16
00005f ee0e                      			ldi r16, low(-31250) ;
000060 9300 0084                 			sts TCNT1L, r16
                                 
000062 e080                      			ldi r24, 0x00 ; byte thap bien dem xung
000063 e090                      			ldi r25, 0x00 ; byte cao bien dem xung
                                 
000064 e014                      			LDI R17,0X04 ;Timer1 chay,he so chia N=256	
000065 9310 0081                 			STS TCCR1B,R17
                                 ; Main loop
                                 loop:	
000067 9b4e                      			sbis PIND, 6 ; cho xuat hien canh len cua PD6
000068 cffe                      			rjmp loop
                                 loop_nes:
000069 994e                      			sbic PIND, 6 ; cho xuat hien canh xuong cua PD6
00006a cffe                      			rjmp loop_nes
                                 
00006b 9601                      			adiw r24, 1 ; tang bien dem len 1
                                 
00006c b316                      			in r17,TIFR1 ; doc thanh ghi co TIMER1
00006d ff10                      			SBRS R17,TOV1; skip rjmp neu co TOV1=1 bao TIMER1 tran
00006e cff8                      			RJMP loop ; neu chua tran, chua du 1 giay thi tiep tuc dem xung
                                 
00006f bb16                      			out TIFR1,R17; timer1 tran, xoa co
000070 e010                      			LDI R17,0X00 ;Timer1 mode NOR, cho Timer d?ng
000071 9310 0081                 			STS TCCR1B,R17
                                 
                                 ; r25:r24 now contains the number of pulses in one second
000073 01ac                      			MOVW R20,R24 ; R20 <-- R24, R21 <-- R25
000074 954a                      			DEC R20 ; sai so 1Hz
000075 d0d0                      			RCALL BIN16_BCD5DG ;chuyen so nhi phan 16 bit sang 5 ky so BCD
000076 e818                      			LDI R17,$88 ;con tro bat dau o dau vi tri 9 dong 2
000077 d0b3                      			RCALL CURS_POS ;xuet lenh ra LCD
000078 d0da                      			RCALL NUM_DISP ;hien thi tan so cua xung
                                 ;---------------------------------------------------
                                 ; do chu ki cua xung
                                 ;---------------------------------------------------
000079 e000                      			LDI R16,0X00
00007a 9300 0080                 			STS TCCR1A,R16 ;Timer1 mode NOR
00007c e402                      			LDI R16,0B01000010 ;Timer1 mode NOR,N=8,bat ngo vao canh len
00007d 9300 0081                 			STS TCCR1B,R16
00007f 9ab5                      			SBI TIFR1,ICF1 ;xoa co ICF1 chuan bi do
000080 b316                      WAIT0:		IN R17,TIFR1 ;doc thanh ghi co Timer1
000081 ff15                      			SBRS R17,ICF1 ;cho co ICF1=1 bao bat duoc xung kich khoi
000082 cffd                      			RJMP WAIT0 ;ICF1=0: cho co ICF1=1
000083 bb16                      			OUT TIFR1,R17 ;ICF1=1: xoa co ICF1
000084 9120 0086                 			LDS R18,ICR1L ;cat thoi diem lay mau canh len
000086 9130 0087                 			LDS R19,ICR1H
000088 b316                      WAIT1:		IN R17,TIFR1 ;doc thanh ghi co Timer1
000089 ff15                      			SBRS R17,ICF1 ;cho co ICF1=1 bao bat duoc xung kich khoi
00008a cffd                      			RJMP WAIT1 ;ICF1=0: cho co ICF1=1
00008b bb16                      			OUT TIFR1,R17 ;ICF1=1: xoa co ICF1
00008c 9140 0086                 			LDS R20,ICR1L ;cat thoi diem lay mau canh len tiep theo
00008e 9150 0087                 			LDS R21,ICR1H
000090 1b42                      			SUB R20,R18 ;tru thoi diem sau voi thoi diem dau
000091 0b53                      			SBC R21,R19
                                 ;---------------------------------------------------
                                 ; kiem tra chu ki cua xung co lon hon 725us khong
                                 ; tuc la kiem tra thoi gian muc cao cua xung co lon hon 655us khong
                                 ;---------------------------------------------------
                                 KIEMTRA:
000092 ed05                      			LDI R16,LOW(725) ; kiem tra xem chu ki co >= 725us khong
000093 e012                      			LDI R17,HIGH(725)
000094 934f                      			PUSH R20
000095 935f                      			PUSH R21
000096 1b40                      			SUB R20,R16
000097 0b51                      			SBC R21,R17
000098 f040                      			BRCS PERIOD2 ; neu am thi <725us, chuyen toi PERIOD2
000099 c000                      			RJMP PERIOD1 ; so nay >725us chuyen den PERIOD1
                                 ;---------------------------------------------------
                                 ; Truong hop 1: chu ki lon hon 725us, ta phai chia chu ki cho 100 truoc
                                 ;---------------------------------------------------
                                 PERIOD1:
00009a 915f                      			POP R21
00009b 914f                      			POP R20
00009c e664                      			LDI OPD2,100
00009d d040                      			RCALL DIV16_8 ; chia cho 100
00009e 012a                      			MOVW R4,R20; R4 <-- R20, R5 <-- R21, nap chu ki (da chia 100) vao so chia cua DIV_16
00009f e061                      			LDI R22,1; danh dau truong hop 1
0000a0 c004                      			RJMP NEXTDUTY
                                 ;---------------------------------------------------
                                 ; Truong hop 2: chu ki nho hon 725us, ta khong can chia
                                 ;---------------------------------------------------
                                 PERIOD2:	
0000a1 915f                      			POP R21
0000a2 914f                      			POP R20
0000a3 012a                      			MOVW R4,R20 ; khong chia 100, nap chu ki vao so chia cua DIV_16
0000a4 e062                      			LDI R22,2; danh dau truong hop 2
                                 ;---------------------------------------------------
                                 ; do thoi gian muc cao cua xung
                                 ;---------------------------------------------------
0000a5 e000                      NEXTDUTY:	LDI R16,0X00
0000a6 9300 0080                 			STS TCCR1A,R16 ;Timer1 mode NOR
0000a8 e402                      			LDI R16,0B01000010 ;Timer1 mode NOR,N=8,bat ngo vao canh len
0000a9 9300 0081                 			STS TCCR1B,R16
0000ab 9ab5                      DUTYCYCLE:	SBI TIFR1,ICF1 ;xoa co ICF1 chuan bi do
0000ac b316                      	WAIT2:  IN R17,TIFR1 ;doc thanh ghi co Timer1
0000ad ff15                      			SBRS R17,ICF1 ;cho co ICF1=1 bao bat duoc xung kich khoi
0000ae cffd                      			RJMP WAIT2 ;ICF1=0: cho co ICF1=1
0000af bb16                      			OUT TIFR1,R17 ;ICF1=1: xoa co ICF1
0000b0 9120 0086                 			LDS R18,ICR1L ;cat thoi diem lay mau canh len
0000b2 9130 0087                 			LDS R19,ICR1H
0000b4 e002                      			LDI R16,0B00000010 ;Timer1 mode NOR,N=8,bat ngo vao canh xuong
0000b5 9300 0081                 			STS TCCR1B,R16
0000b7 b316                      	WAIT3:	IN R17,TIFR1 ;doc thanh ghi co Timer1
0000b8 ff15                      			SBRS R17,ICF1 ;cho co ICF1=1 bao bat duoc xung kich khoi
0000b9 cffd                      			RJMP WAIT3 ;ICF1=0: cho co ICF1=1
0000ba bb16                      			OUT TIFR1,R17 ;ICF1=1: xoa co ICF1
0000bb 9140 0086                 			LDS R20,ICR1L ;cat thoi diem lay mau canh xuong
0000bd 9150 0087                 			LDS R21,ICR1H
0000bf e402                      			LDI R16,0B01000010 ;Timer1 mode NOR,N=8,bat ngo vao canh len (xung tiep theo)
0000c0 9300 0081                 			STS TCCR1B,R16
0000c2 1b42                      			SUB R20,R18 ;tru thoi diem sau voi thoi diem dau
0000c3 0b53                      			SBC R21,R19  ; chu ky lam viec
0000c4 3061                      			CPI R22,1; kiem tra truong hop 1
0000c5 f009                      			BREQ DUTY1 ; truong hop 1
0000c6 c006                      			RJMP DUTY2 ; truong hop 2
                                 ;---------------------------------------------------
                                 ; Truong hop 1: chu ki tong lon hon 725us (T_high > 655us)
                                 ; So bi chia la thoi gian muc cao
                                 ; So chia la chu ki tong (da bi chia 100)
                                 ; Ta chia thoi gian muc cao cho chu ki tong (da bi chia 100)
                                 ;---------------------------------------------------
                                 DUTY1:		
0000c7 2f95                      			MOV DIVD_QU_H,R21 ; nap so bi chia
0000c8 2f84                      			MOV DIVD_QU_L,R20 ; nap so bi chia
0000c9 d024                      			RCALL DIV_16 ; chia chu ki muc cao cho chu ki tong (da bi chia 100)
0000ca 2f48                      			MOV R20,DIVD_QU_L
0000cb 2f59                      			MOV R21,DIVD_QU_H
0000cc c00c                      			RJMP DONE2
                                 ;---------------------------------------------------
                                 ; Truong hop 2: chu ki tong nho hon 725us (T_high < 655us)
                                 ; So bi chia la thoi gian muc cao (nhan voi 100)
                                 ; So chia la chu ki tong 
                                 ; Ta chia thoi gian muc cao (da nhan voi 100) cho chu ki tong 
                                 ;---------------------------------------------------
                                 DUTY2:
0000cd e604                      			LDI R16,100 ; nhan chu ky muc cao voi 100 de chia lay %
0000ce 9f40                      			MUL R20,R16 ; nhan byte thap voi 100
0000cf 0190                      			MOVW R18,R0 ; chuyen tich vao R18,R19
0000d0 9f50                      			MUL R21,R16; nhan byte cao voi 100
0000d1 0d30                      			ADD R19,R0 ; cong tich byte cao vao R19
0000d2 01a9                      			MOVW R20,R18; chuyen du lieu tu R18,R19 --> R20,R21
0000d3 2f95                      			MOV DIVD_QU_H,R21 ; nap so bi chia 
0000d4 2f84                      			MOV DIVD_QU_L,R20 ; nap so bi chia
0000d5 d018                      			RCALL DIV_16 ; chia chu ki muc cao (da nhan 100) cho chu ki tong
0000d6 2f48                      			MOV R20,DIVD_QU_L ; tra lai thuong so
0000d7 2f59                      			MOV R21,DIVD_QU_H ; tra lai thuong so
0000d8 c000                      			RJMP DONE2
                                 
0000d9 d06c                      DONE2:		RCALL BIN16_BCD5DG ;chuyen so nhi phan 16 bit sang 5 ky so BCD
0000da ec18                      			LDI R17,$C8 ;con tro bat dau o dau vi tri 9 dong 2
0000db d04f                      			RCALL CURS_POS ;xuat lenh ra LCD
0000dc d076                      			RCALL NUM_DISP ;hien thi chu ki nhiem vu
0000dd cf78                      			RJMP START
                                 ;---------------------------------------
                                 ;DIV16_8 chia so nhi phan 16 bit OPD1 cho 8 bit OPD2 (Xem l?u ?? ph?p chia ? H?nh 7.19 ? Gi?o tr?nh)
                                 ;Input: OPD1_H,OPD1_L= SBC(GPR16-31)
                                 ; OPD2=SC(GPR0-31)
                                 ;Output:OPD1_H,OPD1_L=thuong so
                                 ; OPD3=DS(GPR0-31)
                                 ;Su dung COUNT(GPR16-31)
                                 ;---------------------------------------
0000de e120                      DIV16_8:	LDI COUNT,16 ;COUNT=??m 16
0000df 2777                      			CLR OPD3 ;x?a d? s?
0000e0 9488                      	SH_NXT: CLC ;C=0=bit th??ng s?
0000e1 0f44                      			LSL OPD1_L ;d?ch tr?i SBC L,bit0=C=th??ng s?
0000e2 1f55                      			ROL OPD1_H ;quay tr?i SBC H,C=bit7
0000e3 1f77                      			ROL OPD3 ;d?ch bit7 SBC H v?o d? s?
0000e4 f020                      			BRCS OV_C ;tr?n bit C=1,chia ???c
0000e5 1b76                      			SUB OPD3,OPD2 ;tr? d? s? v?i s? chia
0000e6 f418                      			BRCC GT_TH ;C=0 chia ???c
0000e7 0f76                      			ADD OPD3,OPD2 ;C=1 kh?ng chia ???c,kh?ng tr?
0000e8 c002                      			RJMP NEXT
0000e9 1b76                      	OV_C:	SUB OPD3,OPD2 ;tr? d? s? v?i s? chia
0000ea 6041                      	GT_TH:	SBR OPD1_L,1 ;chia ???c,th??ng s?=1
0000eb 952a                      	NEXT:	DEC COUNT ;??m s? l?n d?ch SBC
0000ec f799                      			BRNE SH_NXT ;ch?a ?? ti?p t?c d?ch bit
0000ed 9508                      			RET
                                 ;----------------------------------------------------------------------
                                 ; DIV_16 chia 2 so nhi phan 16 bit DIVD_QU / DIVSR
                                 ; Input: DIVD_QU_H,DIVD_QU_L = so bi chia(SBC)R24:R25
                                 ;	DIVSR_H,DIVSR_L = so chia R4,R5
                                 ; Output: DIVD_QU_H,DIVD_QU_L = thuong so R24:R25
                                 ;		REMDR_H,REMDR_L = du so R2:R3
                                 ; Su dung COUNT
                                 ;----------------------------------------------------------------------
0000ee e100                      DIV_16:		LDI R16,16
0000ef 2f20                      			MOV COUNT,R16
0000f0 2422                      			CLR REMDR_L
0000f1 2433                      			CLR REMDR_H
0000f2 9488                      	AGAIN:	CLC
0000f3 0f88                      			LSL DIVD_QU_L
0000f4 1f99                      			ROL DIVD_QU_H
0000f5 1c22                      			ROL REMDR_L
0000f6 1c33                      			ROL REMDR_H
0000f7 f030                      			BRCS GTN16
0000f8 1824                      			SUB REMDR_L,DIVSR_L
0000f9 0835                      			SBC REMDR_H,DIVSR_H
0000fa f428                      			BRCC GT_TH16
0000fb 0c24                      			ADD REMDR_L,DIVSR_L
0000fc 1c35                      			ADC REMDR_H,DIVSR_H
0000fd c003                      			RJMP NEXT16
0000fe 1824                      	GTN16:	SUB REMDR_L,DIVSR_L
0000ff 0835                      			SBC REMDR_H,DIVSR_H;
000100 6081                      GT_TH16:	SBR DIVD_QU_L,1
000101 952a                      	NEXT16:	DEC COUNT
000102 f779                      			BRNE AGAIN
000103 9508                      			RET
                                 ;----------------------------------------------------------------------
                                 // Xuat gia tri len LCD
                                 ;----------------------------------------------------------------------
                                 ;----------------------------------------------------------------------
                                 ;khoi tao LCD gom:
                                 ;reset cap nguon
                                 ;cau hinh LCD hoat dong che do 8 bit
                                 ;khoi tao cac gia tri
                                 ;----------------------------------------------------------------------
                                 ;-----------------------------------------------------------------
                                 ;Cac lenh reset cap nguon LCD 8 bit
                                 ;Cho han 15ms
                                 ;Ghi ma lenh 30H lan 1, cho it nhat 4.1ms
                                 ;Ghi ma lenh 30H lan 2, cho it nhat 100us
                                 ;Ghi ma lenh 30H lan 3, cho it nhat 100us
                                 ;-----------------------------------------------------------------
                                 POWER_RESET_LCD8:
000104 ec08                      		LDI R16,200 ;delay 20ms
000105 d037                      		RCALL DELAY_US ;ctc delay 100usxR16
                                 		;Ghi m? lenh 30H lan 1, cho 4.2ms
000106 9840                      		CBI CONT,RS ;RS=0 ghi lenh
000107 e310                      		LDI R17,$30 ;m? lenh=$30 lan 1,RS=RW=E=0
000108 d027                      		RCALL OUT_LCD ;ctc ghi ra LCD
000109 e20a                      		LDI R16,42 ;delay 4.2ms
00010a d032                      		RCALL DELAY_US
                                 		;Ghi m? lenh 30H lan 2, cho 200us
00010b 9840                      		CBI CONT,RS ;RS=0 ghi lenh
00010c e310                      		LDI R17,$30 ;m? lenh=$30 lan 2
00010d d022                      		RCALL OUT_LCD
00010e e002                      		LDI R16,2 ;delay 200?s
00010f d02d                      		RCALL DELAY_US
                                 		;Ghi m? lenh 30H lan 3, cho 200us
000110 9840                      		CBI CONT,RS ;RS=0 ghi lenh
000111 e310                      		LDI R17,$30
000112 d01d                      		RCALL OUT_LCD
000113 e002                      		LDI R16,2 ;delay 200us
000114 d028                      		RCALL DELAY_US
000115 9508                      		RET
                                 ;-----------------------------------------------------------------
                                 ;INIT_LCD8 khoi dong LCD ghi 4 byte m? lenh
                                 ;Function set: 0x38: 8 bit, 2 d?ng font 5x8
                                 ;Clear display: 0x01: x?a m?n h?nh
                                 ;Display on/off control: 0x0C: m?n h?nh on, con tro off
                                 ;Entry mode set: 0x06: dich phai con tro, dia chi DDRAM tang 1 khi ghi data
                                 ;----------------------------------------------------------------
                                 INIT_LCD8:	
000116 9840                      		CBI CONT,RS ;RS=0 ghi lenh
000117 e318                      		LDI R17,0x38 ;che do giao tiep 8 bit, 2 d?ng font 5x8
000118 d017                      		RCALL OUT_LCD
000119 e001                      		LDI R16,1 ;cho 100us
00011a d022                      		RCALL DELAY_US
00011b 9840                      		CBI CONT,RS ;RS=0 ghi lenh
00011c e011                      		LDI R17,0x01 ;x?a m?n h?nh
00011d d012                      		RCALL OUT_LCD
00011e e104                      		LDI R16,20 ;cho 2ms sau lenh Clear display
00011f d01d                      		RCALL DELAY_US
000120 9840                      		CBI CONT,RS ;RS=0 ghi lenh
000121 e01c                      		LDI R17,0x0C ;m?n h?nh on, con tro off
000122 d00d                      		RCALL OUT_LCD
000123 e001                      		LDI R16,1 ;cho 100us
000124 d018                      		RCALL DELAY_US
000125 9840                      		CBI CONT,RS ;RS=0 ghi lenh
000126 e016                      		LDI R17,0x06 ;dich phai con tro, dia chi DDRAM tang 1 khi ghi data
000127 d008                      		RCALL OUT_LCD
000128 e001                      		LDI R16,1 ;cho 100us
000129 d013                      		RCALL DELAY_US
00012a 9508                      		RET
                                 ;----------------------------------------------------------
                                 ;CURS_POS ??t con tr? t?i v? tr? c? ??a ch? trong R17
                                 ;Input: R17=$80 -$8F d?ng 1,$C0-$CF d?ng 2
                                 ;R17= ??a ch? v? tr? con tr?
                                 ;S? d?ng R16,ctc DEAY_US,OUT_LCD
                                 ;----------------------------------------------------------
                                 CURS_POS: 
00012b e001                      		LDI R16,1 ;ch? 100?s
00012c d010                      		RCALL DELAY_US
00012d 9840                      		CBI CONT,RS ;RS=0 ghi l?nh
00012e d001                      		RCALL OUT_LCD
00012f 9508                      		RET
                                 ;--------------------------------------------------
                                 ;OUT_LCD ghi m? lenh/data ra LCD
                                 ;Input: R17 chua m? lenh/data
                                 ;--------------------------------------------------
                                 OUT_LCD:	
000130 b915                      		OUT OUTPORT,R17 ;1MC,ghi lenh/data ra LCD
000131 9a42                      		SBI CONT,E ;2MC,xuat xung cho ph?p LCD
000132 9842                      		CBI CONT,E ;2MC
000133 9508                      		RET
                                 ;-----------------------------------------------------------------
                                 ;MSG_DISP hi?n th? chu?i k? t? k?t th?c b?ng m? NULL ??t trong Flash ROM
                                 ;Input: Z ch?a ??a ch? ??u chu?i k? t?
                                 ;Output: hi?n th? chu?i k? t? ra LCD t?i v? tr? con tr? hi?n h?nh
                                 ;S? d?ng R16,R17,ctc DELAY_US,OUT_LCD
                                 ;------------------------------------------------------------------
000134 9115                      MSG_DISP:	LPM R17,Z+ ;l?y m? ASCII k? t? t? Flash ROM
000135 3010                      			CPI R17,NULL ;ki?m tra k? t? k?t th?c
000136 f029                      			BREQ EXIT_MSG ;k? t? NULL tho?t
000137 e001                      			LDI R16,1 ;ch? 100?s
000138 d004                      			RCALL DELAY_US
000139 9a40                      			SBI CONT,RS ;RS=1 ghi data hi?n th? LCD
00013a dff5                      			RCALL OUT_LCD ;ghi m? ASCII k? t? ra LCD
00013b cff8                      			RJMP MSG_DISP ;ti?p t?c hi?n th? k? t?
00013c 9508                      EXIT_MSG:	RET
                                 ;-------------------------------------------------------
                                 ;DELAY_US tao thoi gian tre =R16x100us(Fosc=8MHz, CKDIV8 = 1)
                                 ;Input:R16 he so nh?n thoi gian 
                                 ;-------------------------------------------------------
                                 DELAY_US: 
00013d 2ef0                      		MOV R15,R16 ;1MC nap data cho R15
00013e ec08                      		LDI R16,200 ;1MC su dung R16
00013f 2ee0                      		L1: MOV R14,R16 ;1MC nap data cho R14
000140 94ea                      		L2: DEC R14 ;1MC
000141 0000                      		NOP ;1MC
000142 f7e9                      		BRNE L2 ;2/1MC
000143 94fa                      		DEC R15 ;1MC
000144 f7d1                      		BRNE L1 ;2/1MC
000145 9508                      		RET ;4MC
                                 ;---------------------------------------------------------
                                 ;BIN16_BCD5DG chuyen doi so nhi phan 16 bit sang so BCD 5 digit
                                 ;Inputs: OPD1_H=R21:OPD1_L=R20 chua so nhi phan 16 bit
                                 ;Outputs: BCD_BUF:BCD_BUF+4:dia chi SRAM chua 5 digit BCD tu cao den thap
                                 ;Su dung R17,COUNT,X,ctc DIV16_8
                                 ;---------------------------------------------------------
                                 BIN16_BCD5DG:
000146 e0b2                      			LDI XH,HIGH(BCD_BUF);X tr? ??a ch? ??u buffer BCD
000147 e0a0                      			LDI XL,LOW(BCD_BUF)
000148 e025                      			LDI COUNT,5 ;??m s? byte b? nh?
000149 e010                      			LDI R17,0X00 ;n?p gi? tr? 0
00014a 931d                      LOOP_CL:	ST X+,R17 ;x?a buffer b? nh?
00014b 952a                      			DEC COUNT ;??m ?? 5 byte
00014c f7e9                      			BRNE LOOP_CL
00014d e06a                      			LDI OPD2,10 ;n?p s? chia (SC)
00014e df8f                      DIV_NXT:	RCALL DIV16_8 ;chia s? nh? ph?n 16 bit cho s? nh? ph?n 8 bit
00014f 937e                      			ST -X,OPD3 ;c?t s? d? v?o buffer
000150 3040                      			CPI OPD1_L,0 ;th??ng s?=0?
000151 f7e1                      			BRNE DIV_NXT ;kh?c 0 chia ti?p
000152 9508                      			RET
                                 ;------------------------------------------------
                                 ;NUM_DISP hi?n th? 5 k? t? ??a ch? ??u BCD_BUF trong SRAM
                                 ;(BCD_BUF)=digit cao nh?t,(BCD_BUF+4)=digit th?p nh?t
                                 ;S? d?ng R16,R17,COUNT,X,ctc DELAY_US,ctc OUT_LCD
                                 ;------------------------------------------------
000153 e025                      NUM_DISP:	LDI COUNT,5 ;hi?n th? 5 k? t?
000154 e0b2                      			LDI XH,HIGH(BCD_BUF) ;X tr? ??a ch? ??u buffer
000155 e0a0                      			LDI XL,LOW(BCD_BUF)
000156 911d                      DISP_NXT:	LD R17,X+ ;l?y s? BCD t? buffer,t?ng ??a ch? buffer k? ti?p
000157 e300                      			LDI R16,0X30 ;chuy?n sang m? ASCII
000158 0f10                      			ADD R17,R16
000159 e001                      			LDI R16,1 ;ch? 100?s
00015a dfe2                      			RCALL DELAY_US
00015b 9a40                      			SBI CONT,RS ;RS=1 ghi data hi?n th? LCD
00015c dfd3                      			RCALL OUT_LCD ;ghi k? t? ra LCD
00015d 952a                      			DEC COUNT ;hi?n th? ?? 5 k? t?
00015e f7b9                      			BRNE DISP_NXT
00015f 9508                      			RET
                                 ;------------------------------------------------
                                 			.ORG 0X0200
                                 ;------------------------------------------------
000200 2866
000201 7a48
000202 2029
000203 3a20
000204 0020                      MSG1: .DB "f(Hz)  : ",$00
000205 4b43
000206 564e
000207 2528
000208 3a29
000209 0020                      MSG2: .DB "CKNV(%): ",$00;$E4 m? k? t? ?


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega324PA" register use summary:
x  :   3 y  :   0 z  :   1 r0 :   2 r1 :   0 r2 :   5 r3 :   5 r4 :   5 
r5 :   3 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   2 r15:   2 r16:  47 r17:  42 r18:  14 r19:   5 r20:  21 
r21:  14 r22:   8 r23:   6 r24:   9 r25:   6 r26:   2 r27:   2 r28:   0 
r29:   0 r30:   2 r31:   2 
Registers used: 23 out of 35 (65.7%)

"ATmega324PA" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   4 adiw  :   1 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   3 break :   0 breq  :   2 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  13 cbr   :   0 
clc   :   2 clh   :   0 cli   :   0 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   3 cpse  :   0 dec   :   7 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   0 jmp   :   0 
ld    :   1 ldd   :   0 ldi   :  61 lds   :   8 lpm   :   1 lsl   :   2 
lsr   :   0 mov   :  11 movw  :   5 mul   :   2 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   0 out   :  10 pop   :   4 
push  :   2 rcall :  36 ret   :  10 reti  :   0 rjmp  :  17 rol   :   5 
ror   :   0 sbc   :   5 sbci  :   0 sbi   :   5 sbic  :   1 sbis  :   1 
sbiw  :   0 sbr   :   2 sbrc  :   0 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :  12 
sub   :   7 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega324PA" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000414    578     20    598   32768   1.8%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
